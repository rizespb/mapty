'use strict';

const form = document.querySelector('.form');
const containerWorkouts = document.querySelector('.workouts');
const inputType = document.querySelector('.form__input--type');
const inputDistance = document.querySelector('.form__input--distance');
const inputDuration = document.querySelector('.form__input--duration');
const inputCadence = document.querySelector('.form__input--cadence');
const inputElevation = document.querySelector('.form__input--elevation');

////////////////////////////////////////////////

class Workout {
  date = new Date();
  id = (Date.now() + '').slice(-10); // –í –∫–∞—á–µ—Å—Ç–µ ID –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ü–∏—Ñ—Ä –¥–∞—Ç—ã (–º–æ–º–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è Workout)
  clicks = 0;

  constructor(coords, distance, duration) {
    // this.date = new Date();
    // this.id = ...
    this.coords = coords; // [lat, lng]
    this.distance = distance; // in km
    this.duration = duration; // in min
  }

  _setDescription() {
    // prettier-ignore
    const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];

    // —Å–≤–æ–π—Å—Ç–≤–æ type, –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–µ –≤ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–µ, –∑–∞–¥–∞–µ—Ç—Å—è –≤ –∫–ª–∞—Å—Å–∞—Ö Running –∏ Cycling. –ü–æ—ç—Ç–æ–º—É _setDescription –º—ã –ø–∏—à–µ–º –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º –∫–ª–∞—Å—Å–µ Workout, –Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –µ–≥–æ –±—É–¥–µ–º –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞—Ö –∫–ª–∞—Å—Å–æ–≤ Running –∏ Cycling
    this.description = `${this.type[0].toUpperCase()}${this.type.slice(1)} on ${
      months[this.date.getMonth()]
    } ${this.date.getDate()}`;
  }

  click() {
    this.clicks++;
  }
}

////////////////////////////////////////////////

class Running extends Workout {
  type = 'running';

  constructor(coords, distance, duration, cadence) {
    super(coords, distance, duration);
    this.cadence = cadence;
    this.calcPace();
    this._setDescription();
  }

  calcPace() {
    // min/km
    this.pace = this.duration / this.distance;
    return this.pace;
  }
}

////////////////////////////////////////////////

class Cycling extends Workout {
  type = 'cycling';

  constructor(coords, distance, duration, elevationGain) {
    super(coords, distance, duration);
    this.elevationGain = elevationGain;
    this.calcSpeed();
    this._setDescription();
  }

  calcSpeed() {
    // km/h
    this.speed = this.distance / (this.duration / 60);
    return this.speed;
  }
}

////////////////////////////////////////////////
/// APPLICATION ARCHITECTURE
class App {
  #map;
  #mapZoomLevel = 13;
  #mapEvent;
  #workouts = [];

  constructor() {
    // Get user's position
    this._getPosition();

    // Get data from local storage
    this._getLocalStorage();

    // –£—Å—Ç–∞–Ω–≤–æ–∫–∞ –Ω–æ–≤–æ–≥–æ –º–∞—Ä–∫–µ—Ä–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã
    form.addEventListener('submit', this._newWorkout.bind(this));

    // –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä–∞ Running –∏–ª–∏ Cycling –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å/ —Å–∫—Ä—ã–≤–∞—Ç—å –ø–æ–ª—è Cadence –∏ Elevation
    inputType.addEventListener('change', this._toggleElevationField);

    containerWorkouts.addEventListener('click', this._moveToPopup.bind(this));
  }

  _getPosition() {
    // if (navigator.geolocation) –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∏ –±—Ä–∞—É–∑–µ—Ä API navigator.geolocation. –ï—Å–ª–∏ –¥–∞, —Ç–æ–≥–¥–∞ –≤—ã–∑—ã–≤–∞–µ —Ñ—É–Ω–∫–∏—é navigator.geolocation
    if (navigator.geolocation)
      // getCurrentPosition –¥–æ–ª–∂–Ω–∞ –ø–æ–ª—É—á–∞—Ç—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–≤–µ —Ñ—É–∫–Ω—Ü–∏–∏:
      // 1. –í —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (—ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–∞—Ä–º–µ—Ç—Ä–∞ –æ–±—ä–µ–∫—Ç —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏)
      // 2. –§—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º–∞—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
      navigator.geolocation.getCurrentPosition(
        this._loadMap.bind(this),
        function () {
          alert('Could not get your postion');
        }
      );
  }

  // –í—ã–≤–æ–¥ –∫–∞—Ä—Ç—ã —Å –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  _loadMap(position) {
    const { latitude } = position.coords;
    const { longitude } = position.coords;
    console.log(`https://www.google.ru/maps/@${latitude},${longitude}`);

    const coords = [latitude, longitude];

    // L - —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º–∞—è Leaflet
    // 'map' - —ç—Ç–æ ID –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –∫–∞—Ä—Ç—ã
    // coords - —Å–æ—Ö—Ä–∞–Ω–Ω–µ–Ω—ã–µ –≤—ã—à–µ –∫–æ–æ—Ä–¥–∏–Ω—Ç—ã
    // 13 - –º–∞—Å—à—Ç–∞–±
    this.#map = L.map('map').setView(coords, this.#mapZoomLevel);

    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution:
        '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
    }).addTo(this.#map);

    // –ú–µ—Ç–æ–¥ on() –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Leaflet - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π
    // –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∏–∫ –ø–æ –∫–∞—Ä—Ç–µ
    this.#map.on('click', this._showForm.bind(this));

    // –í—ã–≤–æ–¥–∏–º –º–∞—Ä–∫–µ—Ä—ã –∏–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, —Ö—Ä–∞–Ω–∏–º–æ–π –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    this.#workouts.forEach(work => {
      this._renderWorkoutMarker(work);
    });
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —Å–ª–µ–≤–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫–∞—Ä—Ç—É
  _showForm(mapE) {
    this.#mapEvent = mapE;
    form.classList.remove('hidden');
    inputDistance.focus();
  }

  _hideForm() {
    // –û—á–∏—â–∞–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
    inputDistance.value =
      inputDuration.value =
      inputCadence.value =
      inputElevation.value =
        '';

    // –î–ª—è –±–æ–ª–µ–µ –∫—Ä–∞—Å–∏–≤–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞, –º—ã –¥–µ–ª–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π.
    // –í –ø—Ä–∏–Ω—Ü–∏–ø–µ, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±—ã–ª–æ —Ç–æ–ª—å–∫–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–ª–∞—Å—Å hidden
    form.style.display = 'none';
    form.classList.add('hidden');
    setTimeout(() => (form.style.display = 'grid'), 1000);
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ / —Å–∫—Ä—ã–≤–∞–µ–º input –¥–ª—è Cadence –∏–ª–∏ Elevation Gain –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä—ã Running –∏–ª–∏ Cycling
  _toggleElevationField() {
    inputElevation.closest('.form__row').classList.toggle('form__row--hidden');
    inputCadence.closest('.form__row').classList.toggle('form__row--hidden');
  }

  // –£—Å—Ç–∞–Ω–≤–æ–∫–∞ –Ω–æ–≤–æ–≥–æ –º–∞—Ä–∫–µ—Ä–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã –∏ –≤—ã–≤–æ–¥ –∑–∞–ø–∏—Å–∏ –≤ —Å–ø–∏—Å–∫–µ –ø–æ–¥ —Ñ–æ—Ä–º–æ–π
  _newWorkout(e) {
    e.preventDefault();

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è—é—Ç—Å—è –ª–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ü–µ–ª—ã–º–∏ —á–∏—Å–ª–∞–º–∏
    const validInputs = (...inputs) =>
      inputs.every(inp => Number.isFinite(inp));

    const allPositive = (...inputs) => inputs.every(inp => inp > 0);

    // Get data from form
    const type = inputType.value;
    const distance = +inputDistance.value;
    const duration = +inputDuration.value;
    const { lat, lng } = this.#mapEvent.latlng;
    let workout;

    // If workout running, creat running object
    if (type === 'running') {
      const cadence = +inputCadence.value;

      // Check if data is valid
      if (
        !validInputs(distance, duration, cadence) ||
        !allPositive(distance, duration, cadence)
      )
        return alert('Inputs have to be positive numbers');

      workout = new Running([lat, lng], distance, duration, cadence);
    }

    // If workout cycling, creat cycling object
    if (type === 'cycling') {
      const elevation = +inputElevation.value;

      // Check if data is valid
      // elevation –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º, –ø–æ—ç—Ç–æ–º—É —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º allPositive
      if (
        !validInputs(distance, duration, elevation) ||
        !allPositive(distance, duration)
      )
        return alert('Inputs have to be positive numbers');

      workout = new Cycling([lat, lng], distance, duration, elevation);
    }

    // Add new object to workout array
    this.#workouts.push(workout);

    // Render workout on map as marker
    this._renderWorkoutMarker(workout);

    // Render workout on list
    this._renderWorkout(workout);

    // Hide form + clear input fields
    this._hideForm();

    // Set local storage to all workouts
    this._setLocalStorage();
  }

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞—Ä–∫–µ—Ä –Ω–∞ –∫–∞—Ä—Ç–µ
  _renderWorkoutMarker(workout) {
    L.marker(workout.coords)
      .addTo(this.#map)
      .bindPopup(
        L.popup({
          maxWidth: 250,
          minWidth: 100,
          autoClose: false,
          closeOnClick: false,
          className: `${workout.type}-popup`,
        })
      )
      .setPopupContent(
        `${workout.type === 'running' ? 'üèÉ‚Äç‚ôÇÔ∏è' : 'üö¥‚Äç‚ôÄÔ∏è'} ${workout.description}`
      )
      .openPopup();
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –≤ —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
  _renderWorkout(workout) {
    let html = `
      <li class="workout workout--${workout.type}" data-id="${workout.id}">
        <h2 class="workout__title">${workout.description}</h2>
          <div class="workout__details">
            <span class="workout__icon">${
              workout.type === 'running' ? 'üèÉ‚Äç‚ôÇÔ∏è' : 'üö¥‚Äç‚ôÄÔ∏è'
            }</span>
            <span class="workout__value">${workout.distance}</span>
            <span class="workout__unit">km</span>
          </div>
          <div class="workout__details">
            <span class="workout__icon">‚è±</span>
            <span class="workout__value">${workout.duration}</span>
            <span class="workout__unit">min</span>
          </div>
          `;

    if (workout.type === 'running') {
      html += `
          <div class="workout__details">
            <span class="workout__icon">‚ö°Ô∏è</span>
            <span class="workout__value">${workout.pace.toFixed(1)}</span>
            <span class="workout__unit">min/km</span>
          </div>
          <div class="workout__details">
            <span class="workout__icon">ü¶∂üèº</span>
            <span class="workout__value">${workout.cadence}</span>
            <span class="workout__unit">spm</span>
          </div>
        </li>
            `;
    }

    if (workout.type === 'cycling') {
      html += `
          <div class="workout__details">
            <span class="workout__icon">‚ö°Ô∏è</span>
            <span class="workout__value">${workout.speed.toFixed(1)}</span>
            <span class="workout__unit">km/h</span>
          </div>
          <div class="workout__details">
            <span class="workout__icon">‚õ∞</span>
            <span class="workout__value">${workout.elevation}</span>
            <span class="workout__unit">m</span>
          </div>
        </li>
            `;
    }

    form.insertAdjacentHTML('afterend', html);
  }

  // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É –º–∞—Ä–∫–µ—Ä—É –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∑–∞–ø–∏—Å—å –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ

  _moveToPopup(e) {
    const workoutEl = e.target.closest('.workout');

    if (!workoutEl) return;

    const workout = this.#workouts.find(
      work => work.id === workoutEl.dataset.id
    );

    // setView() - –º–µ—Ç–æ–¥ –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Leaflet
    this.#map.setView(workout.coords, this.#mapZoomLevel, {
      animate: true,
      pan: {
        duration: 1,
      },
    });

    // using the public interface
    // —Å—á–∏—Ç–∞–µ–º –∫–ª–∏–∫–∏ –ø–æ –∑–∞–ø–∏—Å–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ - –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –æ–±—ä–µ–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—Å—å –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏ –±—ã–ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Å–Ω–æ–≤–∞ –≤ –æ–±—ä–µ–∫—Ç—ã —Ç–µ—Ä—è—é—Ç —Ü–µ–ø—å –ø—Ä–æ—Ç–æ—Ç–∏–ø–æ–≤ –∏ –±–æ–ª—å—à–µ –Ω–µ —Å–≤—è–∑–∞–Ω—ã —Å –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞–º–∏. –ò—Ö –Ω–∞–¥–æ —Å–æ–∑–¥–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    // workout.click();
  }

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
  _setLocalStorage() {
    // –ü–µ—Ä–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä - –Ω–∞–∑–≤–∞–Ω–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    // –í—Ç–æ—Ä–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä - —Å—Ç—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä—É—é –Ω–∞–¥–æ —Ö—Ä–∞–Ω–∏—Ç—å. –ü–æ—ç—Ç–æ–º—É —Å –ø–æ–º–æ—â—å—é JSON.stringify –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –≤ —Å—Ç—Ä–æ–∫—É
    localStorage.setItem('workouts', JSON.stringify(this.#workouts));
  }

  // –ü–æ—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
  _getLocalStorage() {
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º workouts –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é data
    const data = JSON.parse(localStorage.getItem('workouts'));

    if (!data) return;

    this.#workouts = data;

    // –î–∞–ª–µ–µ –º—ã –≤—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω—Ä–æ–≤–æ–∫ —Å–ª–µ–≤–∞.
    // –ú–∞—Ä–∫–µ—Ä—ã –º—ã –≤—ã–µ—Å—Ç–∏ –Ω–µ –º–æ–∂–µ–º, —Ç.–∫. –∫–∞—Ä—Ç–∞ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å.
    // –ü–æ—ç—Ç–æ–º—É –º–∞—Ä–∫–µ—Ä—ã –º—ã –±—É–¥–µ–º –≤—ã–≤–æ–¥–∏—Ç –≤ –º–µ—Ç–æ–¥–µ _loadMap
    this.#workouts.forEach(work => {
      this._renderWorkout(work);
    });
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
  // –ë—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∏–∑ –∫–æ–Ω—Å–æ–ª–∏
  reset() {
    localStorage.removeItem('workouts');
    location.reload();
  }
}
////////////////////////////////////////////////

const app = new App();

////////////////////////////////////////////////
